---
import Layout from "../../layouts/Layout.astro";

import SectionPageTitle from "../../components/SectionPageTitle.astro";
import PageSection from "../../components/PageSection.astro";
import Prose from "../../components/Prose.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import TuneDots from "../../components/lakeland-fiddlers/TuneDots.astro";
import TuneMetaHeader from "../../components/lakeland-fiddlers/TuneMetaHeader.astro";
import TuneMetaFooter from "../../components/lakeland-fiddlers/TuneMetaFooter.astro";

import { getEntry, render } from "astro:content";
// 1. Get the slug from the incoming server request
const { id } = Astro.params;
if (id === undefined) {
  throw new Error("id is required");
}
// 2. Query for the entry directly using the request slug
const entry = await getEntry("tunes", id);
// 3. Redirect if the entry does not exist
if (entry === undefined) {
  return Astro.redirect("/404");
}
// 4. (Optional) Render the entry to HTML in the template
const { Content } = await render(entry);

const breadcrumbs = [
  { href: "/tunes", text: "Tunes" },
  { href: "/tunes" + entry.id, text: entry.data.title },
];
const tuneMeta = entry.data.tuneMeta ? entry.data.tuneMeta : false;
const tuneDots = entry.data.tuneDots;
const tuneVideo = entry.data.tuneVideo;
// console.log(entry.data);
---

<Layout>
  <SectionPageTitle pageTitle={entry.data.title}
    ><Breadcrumbs links={breadcrumbs} /></SectionPageTitle
  >
  {
    (tuneMeta.relatedTunes || tuneMeta.bandcamp) && (
      <PageSection>
        <TuneMetaHeader
          relatedTunes={tuneMeta.relatedTunes}
          bandcamp={tuneMeta.bandcamp}
        />
      </PageSection>
    )
  }
  {
    tuneDots &&
      tuneDots.map((dots) => (
        <PageSection>
          <TuneDots tuneDots={dots.dots} />
        </PageSection>
      ))
  }
  {
    tuneVideo &&
      tuneVideo.map((video) => (
        <PageSection>
          <Prose>
            <h2>{video.video.title}</h2>
            <video controls playsinline>
              <source src={video.video.src} type="video/mp4" />
            </video>
          </Prose>
        </PageSection>
      ))
  }
  {
    Content && (
      <PageSection>
        <Prose>
          <Content />
        </Prose>
      </PageSection>
    )
  }
  {
    (tuneMeta.relatedLinks ||
      tuneMeta.rhythm ||
      tuneMeta.date ||
      tuneMeta.source) && (
      <PageSection>
        <TuneMetaFooter
          relatedLinks={tuneMeta.relatedLinks}
          rhythm={tuneMeta.rhythm}
          source={tuneMeta.source}
          date={tuneMeta.date}
        />
      </PageSection>
    )
  }
</Layout>
